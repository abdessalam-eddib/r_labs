attach(auto)
# second solution
attach(auto)
plot(cylinders, mpg)
# convert
cylinders = as.factor(cylinders)
#plot
plot(cylinders, mpg)
hist(mpg,
col='red')
hist(mpg,
col='red')
# we can change number of breaks
hist(mpg,
col = 5,
breaks = 15)
pairs(auto)
# reloading
auto = read.csv("../datasets/auto.csv",
header = T,
na.strings = "?",
stringsAsFactors = T)
View(auto)
# dimension of our dataset
print(dim(auto))
names(auto)
# no missing data
auto = na.omit(auto)
print(dim(auto))
# first solution
plot(auto$mpg, auto$horsepower)
# convert
cylinders = as.factor(cylinders)
#plot
plot(cylinders, mpg)
hist(mpg,
col='red')
# we can change number of breaks
hist(mpg,
col = 5,
breaks = 15)
pairs(auto)
pairs(auto)
# to identify which plot for which pair we can use identify
identify(horsepower, mpg, name)
pairs(auto)
# to identify the value of a variable in a scatter plot for a pair
plot(horsepower, mpg)
identify(horsepower, mpg, name)
summary(auto)
pairs(auto)
# to identify the value of a variable in a scatter plot for a pair
plot(horsepower, mpg)
identify(horsepower, mpg, cylinders)
source("~/GitHub/r_labs/labs/first_lab.Rmd")
# creating a vector of numbers
x = c(1, 2, 3, 4)
# a sequence of number
z = seq(1, 10)
# we can also add step
z = seq(-pi, pi, length=50)
# printing
print(z)
print(x)
# accessing the value of x[i]
# index starts at 1 not like python
y = x[1]
print(y)
# length of the vector
len = length(x)
cat("The length of x is: ", len)
# basic operations
x = 3
y = 5
# addition
print(x + y)
# substraction
print(x - y)
# multiplication
print(x * y)
# division
print(x / y)
# power
print(x^2)
# listing all saved objects
list_ob = ls()
print(list_ob)
# to delete all stored objects
rm(list = ls())
# if we try to call x an erro will occur
#print(x)
# if we want to use a function be we don't know how to use it exactly
?matrix
# let's create one
mat = matrix(data = c(1, 2, 3, 4), nrow = 2, ncol = 2, byrow = TRUE)
print(mat)
# we can access the elements through indexation
print(mat[1,1])
print(mat[1,])
print(mat[,2])
# we can also generate random vectors
# normal distribution
rand_vec = rnorm(10)
print(rand_vec)
# see also, pnorm, qnorm, dbnorm
# https://www.stat.umn.edu/geyer/old/5101/rlook.html#:~:text=rnorm%20is%20the%20R%20function,standard%20deviation%20of%20the%20distribution.
# for the sake of reproducibility, we can fix a seed
set.seed(42)
x = rnorm(n = 20, mean = 0, sd=1)
y = 7 + 2*x
# variance, correlation, mean, standard deviation
print(var(x))
print(mean(x))
print(sd(y))
print(cor(x, y))
# simplest way to plot a graphic
x = rnorm(100)
y = rnorm(100)
# scatter plot
plot(x, y)
# simplest way to plot a graphic
x = rnorm(100)
y = rnorm(100)
# scatter plot
plot(x, y)
# simplest way to plot a graphic
x = rnorm(100)
y = rnorm(100)
# scatter plot
plot(x, y)
# we can make it better by adding a title and labels
plot(x, y, xlab="X-axis",
ylab="Y-axis",
col="green",
main="Title of our Plot")
# these plots can also be saved
# as pdf
pdf("../plots/first_plot.pdf")
plot(x, y, xlab="X-axis",
ylab="Y-axis",
col="green",
main="Title of our Plot")
# then, we tell R that we are done
dev.off()
# we can also save it as a jpeg, png
png("../plots/second_plot.png")
plot(x, y, xlab="X-axis",
ylab="Y-axis",
col="red",
main="Title of our Plot")
# then, we tell R that we are done
dev.off()
# contours
# we use it for 3D data as a topolgical map
# x, y should be in increasing order
x = seq(-pi, pi, length = 50)
y = x
f = outer(x, y, function(x, y) cos(x) + sin(y))
plot.new()
contour(x, y, f, nlevels = 45, add = T)
# with a color map
image(x, y, f)
# or 3D
persp(x, y, f)
# we can change the angle of view
persp(x, y, f,
theta = 30,
phi = 60)
# we use the function read.table()
auto = read.table("../datasets/Auto.data")
# we can view it
View(auto)
# see the first rows
head(auto)
# we use the function read.table()
auto = read.table("../datasets/Auto.data")
# we can view it
View(auto)
# see the first rows
head(auto)
# header = T (or TRUE)
Auto = read.table("../datasets/Auto.data",
header = T,
na.strings = "?",
stringsAsFactors = T)
# saving in csv format
write.csv(Auto, "../datasets/auto.csv")
# reloading
auto = read.csv("../datasets/auto.csv",
header = T,
na.strings = "?",
stringsAsFactors = T)
View(auto)
# dimension of our dataset
print(dim(auto))
names(auto)
# no missing data
auto = na.omit(auto)
print(dim(auto))
# first solution
plot(auto$mpg, auto$horsepower)
# second solution
attach(auto)
plot(cylinders, mpg)
# convert
cylinders = as.factor(cylinders)
#plot
plot(cylinders, mpg)
hist(mpg,
col='red')
# we can change number of breaks
hist(mpg,
col = 5,
breaks = 15)
pairs(auto)
# to identify the value of a variable in a scatter plot for a pair
plot(horsepower, mpg)
identify(horsepower, mpg, cylinders)
summary(auto)
source("~/GitHub/r_labs/labs/first_lab.Rmd")
source("C:/Users/Abdessalam Ed-dib/Documents/GitHub/r_labs/labs/second_lab.Rmd")
source("C:/Users/Abdessalam Ed-dib/Documents/GitHub/r_labs/labs/second_lab.Rmd")
source("C:/Users/Abdessalam Ed-dib/Documents/GitHub/r_labs/labs/second_lab.Rmd")
source("C:/Users/Abdessalam Ed-dib/Documents/GitHub/r_labs/labs/second_lab.Rmd")
source("~/GitHub/r_labs/labs/first_lab.Rmd")
# loading libraries
library(ISLR2)
install.packages("ISLR2")
# loading libraries
library(ISLR2)
install.packages("ISLR2")
install.packages("ISLR2")
# loading libraries
library(ISLR2)
library(MASS)
x = rnorm(10000)
x = rnorm(10000)
var(x)
x = rnorm(1000000)
var(x)
x = rnorm(10000000000)
x = rnorm(10000000)
var(x)
# loading libraries
library(MASS)
library(ISLR2)
# first rows
head(Boston)
# first rows
head(Boston)
# dimensions
dim(Boston)
# loading libraries
library(MASS)
library(ISLR2)
print(2)
# loading libraries
library(MASS)
library(ISLR2)
# loading libraries
library(MASS)
library(ISLR2)
# first rows
head(Boston)
# linear regression
lm.fit = lm(medv ~ lstat, data=Boston)
lm.fit
summary(lm.fit)
names(lm.fit)
# example: coefficients
coef(lm.fit)
# example:
#coefficients
coef(lm.fit)
#confidence intervals
confint(lm.fit)
predict(lm.fit, data.frame(lstat=(c(10,5,89))), interval="confidence")
# prediction intervals
predict(lm.fit, data.frame(lstat=(c(10,5,89))), interval="prediction")
plot(lstat, medv)
plot(Boston$lstat, Boston$medv)
abline(lm.fit)
plot(Boston$lstat, Boston$medv)
abline(lm.fit, col='red')
plot(Boston$lstat, Boston$medv)
abline(lm.fit, col='red', lwd=4)
plot(Boston$lstat, Boston$medv)
abline(lm.fit, col='red', lwd=2)
# bx + a
abline(a, b)
# bx + a
abline(3, 2)
# bx + a
plot.new()
abline(3, 2)
# bx + a
x = seq(10)
plot(x)
plot.new()
abline(3, 2)
# bx + a
x = seq(10)
plot.new()
abline(3, 2)
plot(Boston$lstat, Boston$medv)
abline(lm.fit,
col='red', #color
lwd=2, #line width
pch=10 # shape of points)
plot(Boston$lstat, Boston$medv)
abline(lm.fit,
col='red', #color
lwd=2, #line width
pch=10 # shape of points)
)
plot(Boston$lstat, Boston$medv)
abline(lm.fit,
col='red', #color
lwd=2, #line width
pch=30 # shape of points)
)
plot(Boston$lstat, Boston$medv)
abline(lm.fit,
col='red', #color
lwd=2, #line width
pch=20 # shape of points)
)
plot(Boston$lstat, Boston$medv)
abline(lm.fit,
col='red', #color
lwd=2, #line width
pch='+' # shape of points)
)
plot(Boston$lstat, Boston$medv,
pch='+' # shape of points)
abline(lm.fit,
plot(Boston$lstat, Boston$medv,
pch="+" # shape of points)
abline(lm.fit,
plot(Boston$lstat,
Boston$medv,
pch="+") # shape of points
abline(lm.fit,
col='red', #color
lwd=2, #line width
)
# bx + a
x = seq(10)
y = seq(10)
plot(x, y)
abline(3, 2)
plot(lm.fit)
# to show all the 4 plots simultaneously
par(mfrow= c(2,2)) # like subplots
plot(lm.fit)
source("~/GitHub/r_labs/labs/second_lab.Rmd")
# residuals
plot(predict(lm.fit), residuals(lm.fit))
# studentized residuals
plot(predict(lm.fit), rstudent(lm.fit))
# plotting hatvalues
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
# linear regression with two predictors: lstat and age
lm.fit = lm(medv ~ lstat + age, data = Boston)
summary(lm.fit)
source("~/GitHub/r_labs/labs/second_lab.Rmd")
# power of .
lm.fit = lm(medv ~ ., data = Boston)
summary(lm.fit)
summary(lm.fit)$call
summary(lm.fit)$sigma
summary(lm.fit)$lstat
names(summary(lm.fit))
summary(lm.fit)$terms
summary(lm.fit)$coefficients
# rse
summary(lm.fit)$sigma
# rse
summary(lm.fit)$sigma
# r^2
summary(lm.fit)$r.sq
# importing the library car
library(car)
install.packages("car")
source("~/GitHub/r_labs/labs/second_lab.Rmd")
# importing the library car
library(car)
# computing vif
vif(lm.fit)
# importing the library car
library(car)
# computing vif
vif(lm.fit) > (14 + 1) / 504
# importing the library car
library(car)
# computing vif
vif(lm.fit)
lm.fit = lm(medv ~ . - age - indus, data = Boston)
summary(lm.fit)
# no age / induc since they are insignificant
lm.fit = lm(medv ~ . - age - indus, data = Boston)
summary(lm.fit)
vif(lm.fit)
lm.fit = update(lm.fit, ~ . -age)
lm.fit = update(lm.fit, ~ . -age)
lm.fit = update(lm.fit, ~ . -age)
summary(lm.fit)
source("~/GitHub/r_labs/labs/second_lab.Rmd")
lm.fit = update(lm.fit, ~ . +lstat:age)
summary(lm.fit)
lm.fit = update(lm.fit, ~ . +crim:zn)
summary(lm.fit)
source("~/GitHub/r_labs/labs/second_lab.Rmd")
lm.fit2 = lm(medv ~ lstat + I(lstat^2))
# loading libraries
library(MASS)
library(ISLR2)
# first rows
head(Boston)
# linear regression
lm.fit = lm(medv ~ lstat, data=Boston)
lm.fit
summary(lm.fit)
# fitted model attributes
names(lm.fit)
# example:
#coefficients
coef(lm.fit)
#confidence intervals
confint(lm.fit)
# confidence intervals
predict(lm.fit, data.frame(lstat=(c(10,5,89))), interval="confidence")
# prediction intervals
predict(lm.fit, data.frame(lstat=(c(10,5,89))), interval="prediction")
plot(Boston$lstat,
Boston$medv,
pch="+") # shape of points
abline(lm.fit,
col='red', #color
lwd=2, #line width
)
# bx + a
x = seq(10)
y = seq(10)
plot(x, y)
abline(3, 2)
# to show all the 4 plots simultaneously
par(mfrow= c(2,2)) # like subplots
plot(lm.fit)
# residuals
plot(predict(lm.fit), residuals(lm.fit))
# there is a pattern => not really linear
# studentized residuals
plot(predict(lm.fit), rstudent(lm.fit))
# plotting hatvalues
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
# linear regression with two predictors: lstat and age
lm.fit = lm(medv ~ lstat + age, data = Boston)
summary(lm.fit)
# power of .
lm.fit = lm(medv ~ ., data = Boston)
summary(lm.fit)
# rse
summary(lm.fit)$sigma
# r^2
summary(lm.fit)$r.sq
# importing the library car
library(car)
# computing vif
vif(lm.fit)
# no age / induc since they are insignificant
lm.fit = lm(medv ~ . - age - indus, data = Boston)
summary(lm.fit)
vif(lm.fit)
lm.fit = update(lm.fit, ~ . -age)
summary(lm.fit)
lm.fit = update(lm.fit, ~ . +crim:zn)
summary(lm.fit)
lm.fit2 = lm(medv ~ lstat + I(lstat^2))
lm.fit2 = lm(mevd ~ lstat + I(lstat^2))
lm.fit2 = lm(medv ~ lstat + I(lstat^2),
data = Boston)
summary(lm.fit2)
lm.fit = lm(medv ~ lstat, data = Boston)
anova(lm.fit, lm.fit2)
source("~/GitHub/r_labs/labs/second_lab.Rmd")
par(mfrow = c(2, 2))
plot(lm.fit2)
lm.fit5 = lm(medv ~ poly(lstat, 5))
lm.fit5 = lm(medv ~ poly(lstat, 5), data = Boston)
summary(lm.fit5)
head(Carseats)
# fitting the model
lm.fit <- lm(Sales ~ . + Income:Advertising + Price:Age,
data = Carseats)
summary(lm.fit)
contrasts(Carseats$ShelveLoc)
?contrasts
source("~/GitHub/r_labs/labs/second_lab.Rmd")
LoadLibraries() {
LoadLibraries= function() {
library(ISLR2)
library(MASS)
print("Libraries correctly loaded.")
}
# test
LoadLibraries()
source("~/GitHub/r_labs/labs/second_lab.Rmd")
source("~/GitHub/r_labs/labs/second_lab.Rmd")
source("~/GitHub/r_labs/labs/second_lab.Rmd")
